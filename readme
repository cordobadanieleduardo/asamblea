from asamblea.models import Militante
from django.contrib.auth.models import User
from django.contrib.auth.models import AbstractUser



m = Militante.objects.all()
u = User.objects.all()

print(m)
u = User.objects.get(username="fsmith")

print(m)

m = Militante.objects.create(username='1049629006',email='desarrollotecnologico@partidoverde.org.co', is_active= False)
c = User.objects.create(username='1049629006',email='usuario@gmail.com'), is_active= False


-- xCREAR usaurio
from asamblea.models import Militante
user = Militante.objects.create_user(    username='1049629',    email='usuario2@example.com',    password='contraseña_segura')
print(f'Usuario creado: {user.username} - {user.email}')


## enviar correo

python manage.py shell

from asamblea.models import Militante
from asamblea.views import enviar_email_activacion
usuario = Militante.objects.get(username="1049629006")
usuario
enviar_email_activacion(usuario)


usuario = Militante.objects.create_user(username="testuser", email="@example.com", password="123456")
enviar_email_activacion(usuario)




psql -h 127.0.0.1 -p 5432 -U partidoverdeorg_siravusr -d partidoverdeorg_sirav
wmxt6jQA8Lx$


psql -h 127.0.0.1 -p 5432 -U postgres -d partidoverdeorg_asamblea
wmxt6jQA8Lx$


createdb -U postgres partidoverdeorg_asamblea

Listar todas las tablas en la base de datos actual

\dt

Si quieres ver más detalles sobre las tablas, usa:

\dt+


pg_dump -U partidoverdeorg_siravusr -h 127.0.0.1 -p 5432 -F c -b -v -f /home/backup_sirav27052025.sql partidoverdeorg_sirav



 3. Restaurar el backup
Para restaurar la base de datos desde el archivo .backup:

pg_restore -U usuario -h 127.0.0.1 -p 5432 -d partidoverdeorg_sirav "C:\Users\ADMIN_PAV\Desktop\home\backup_sirav27052025.sql"

py manage.py shell

from asamblea.models import Militante
from asamblea.views import enviar_email_activacion
usuario = Militante.objects.create_user(username="1049629006", email="desarrollotecnologico@partidoverde.org.co", password="1049629006", is_active= False)
usuario = Militante.objects.get(username="1049629006")
usuario
enviar_email_activacion(usuario)
exit()


py manage.py shell

from asamblea.models import Militante
from asamblea.views import enviar_email_activacion
usuario = Militante.objects.get(username="1049629006")
usuario
enviar_email_activacion(usuario)
exit()


py manage.py shell

from asamblea.models import Militante
usuario = Militante.objects.create_user(username="1049629006", email="desarrollotecnologico@partidoverde.org.co", password="1049629006", is_active= False)
usuario
exit()





py manage.py shell

from asamblea.models import Militante
from asamblea.views import enviar_email_activacion
usuario = Militante.objects.create_user(username="1032434230", email="dzambrano@partidoverde.org.co", password="1032434230", is_active= False)
usuario
exit()

py manage.py shell

from asamblea.models import Militante
from asamblea.views import enviar_email_activacion
usuario = Militante.objects.create_user(username="1007717602", email="tutores@partidoverde.org.co", password="1007717602", is_active= False)
usuario
exit()






py manage.py shell

from asamblea.models import Militante
from asamblea.views import enviar_email_activacion
usuario = Militante.objects.create_user(username="1049629006", email="desarrollotecnologico@partidoverde.org.co", password="1049629006")
usuario
exit()




py manage.py shell

from asamblea.models import Militante, Plancha
plancha = Plancha.objects.get(id=1)
plancha2 = Plancha.objects.get(id=2)
usuario = Militante.objects.create_user(username="1049629006", email="desarrollotecnologico@partidoverde.org.co", password="1049629006",is_active= False)
usuario = Militante.objects.create_user(username="1049629007", email="1049629007@partidoverde.org.co", password="1049629007", plancha=plancha, is_active= False)
usuario = Militante.objects.create_user(username="1049629008", email="1049629008@partidoverde.org.co", password="1049629008", plancha=plancha, is_active= False)
usuario = Militante.objects.create_user(username="1049629009",  email="1049629009@partidoverde.org.co", password="1049629009", plancha=plancha, is_active= False)
usuario = Militante.objects.create_user(username="10496290010", email="10496290010@partidoverde.org.co", password="10496290010", plancha=plancha2, is_active= False)
usuario = Militante.objects.create_user(username="10496290011", email="10496290011@partidoverde.org.co", password="10496290011", plancha=plancha, is_active= False)
usuario = Militante.objects.create_user(username="10496290012", email="10496290012@partidoverde.org.co", password="10496290012", plancha=plancha, is_active= False)
usuario = Militante.objects.create_user(username="10496290013", email="10496290013@partidoverde.org.co", password="10496290013", plancha=plancha, is_active= False)
usuario = Militante.objects.create_user(username="10496290014", email="10496290014@partidoverde.org.co", password="10496290014", plancha=plancha2, is_active= False)
usuario = Militante.objects.create_user(username="10496290015", email="10496290015@partidoverde.org.co", password="10496290015", plancha=plancha, is_active= False)
usuario = Militante.objects.create_user(username="10496290016", email="10496290016@partidoverde.org.co", password="10496290016", plancha=plancha, is_active= False)
usuario = Militante.objects.create_user(username="10496290017", email="10496290017@partidoverde.org.co", password="10496290017", plancha=plancha, is_active= False)
usuario = Militante.objects.create_user(username="10496290018", email="10496290018@partidoverde.org.co", password="10496290018", plancha=plancha2, is_active= False)

exit()



py manage.py shell
from asamblea.models import Plancha, Militante
militante= Militante.objects.get(username='daniel')
plancha = Plancha.objects.create(name='Plancha Uno',uc=militante)
plancha2 = Plancha.objects.create(name='Plancha Dos',uc=militante)
exit()


py manage.py shell
from asamblea.models import Militante, Plancha, Puesto
plancha = Plancha.objects.get(id=1)
plancha2 = Plancha.objects.get(id=2)
puesto = Puesto.objects.get(id=1)
puesto2 = Puesto.objects.get(id=2)
usuario = Militante.objects.create_user(username="1049629006", email="desarrollotecnologico@alianzaverde.org.co", password="1049629006")
usuario = Militante.objects.create_user(username="1049629007", email="1049629007@partidoverde.org.co", password="1049629007", plancha=plancha)
usuario = Militante.objects.create_user(username="1049629008", email="1049629008@partidoverde.org.co", password="1049629008", plancha=plancha)
usuario = Militante.objects.create_user(username="1049629009",  email="1049629009@partidoverde.org.co", password="1049629009", plancha=plancha, location= puesto )
usuario = Militante.objects.create_user(username="10496290010", email="10496290010@partidoverde.org.co", password="10496290010", plancha=plancha2)
usuario = Militante.objects.create_user(username="10496290011", email="10496290011@partidoverde.org.co", password="10496290011", plancha=plancha)
usuario = Militante.objects.create_user(username="10496290012", email="10496290012@partidoverde.org.co", password="10496290012", plancha=plancha)
usuario = Militante.objects.create_user(username="10496290013", email="10496290013@partidoverde.org.co", password="10496290013", plancha=plancha)
usuario = Militante.objects.create_user(username="10496290014", email="10496290014@partidoverde.org.co", password="10496290014", plancha=plancha2)
usuario = Militante.objects.create_user(username="10496290015", email="10496290015@partidoverde.org.co", password="10496290015", plancha=plancha,  location= puesto2 )
usuario = Militante.objects.create_user(username="10496290016", email="10496290016@partidoverde.org.co", password="10496290016", plancha=plancha)
usuario = Militante.objects.create_user(username="10496290017", email="10496290017@partidoverde.org.co", password="10496290017", plancha=plancha)
usuario = Militante.objects.create_user(username="10496290018", email="10496290018@partidoverde.org.co", password="10496290018", plancha=plancha2)
exit()



python manage.py shell
from asamblea.models import Militante
usuario = Militante.objects.create_user(username="daniel", email="desarrollotecnologico@partidoverde.org.co", password="daniel", is_active= True, is_staff= True, is_superuser= True)
usuario = Militante.objects.create_user(username="john", email="sistemas@partidoverde.org.co", password="john", is_active= True, is_staff= True, is_superuser= True)

exit()



python manage.py shell

from asamblea.models import Militante
usuario = Militante.objects.create_user(username="1049629006", email="desarrollotecnologico@partidoverde.org.co", password="1049629006", is_active= False)
usuario
exit()


python manage.py shell

from asamblea.models import Militante
usuario = Militante.objects.create_user(username="1049629006", email="soporte@partidoverde.org.co", password="1049629006", is_active= False)
usuario
exit()

python manage.py shell
from asamblea.models import Militante
usuario = Militante.objects.create_user(username="1007717602", email="16estebanmarquez@gmail.com", password="1007717602", is_active= False)
usuario
exit()




Si forzaste un git push o git pull, es importante entender las implicaciones y cómo manejar posibles conflictos.
🚀 Forzar git push
Si usaste git push --force, significa que sobrescribiste el historial remoto con tu versión local. Esto puede causar problemas si otros colaboradores ya habían hecho cambios en el repositorio. Para mitigar riesgos:
- Verifica el historial con git log --oneline --graph --decorate --all.
- Si necesitas recuperar cambios anteriores, usa git reflog para encontrar el commit previo y restaurarlo con git reset --hard <commit_id>.
- Si trabajas en equipo, avisa a los demás para que sincronicen sus ramas correctamente.



🔄 Forzar git pull
Si hiciste git pull --force o git reset --hard origin/main, sobrescribiste tus archivos locales con la versión remota. Esto puede eliminar cambios no confirmados. Para evitar pérdidas:
- Si perdiste cambios locales, revisa git stash list o git reflog para intentar recuperarlos.
- Si necesitas sobrescribir archivos sin perder commits, usa git fetch --all seguido de git reset --hard origin/main.
- Si hubo conflictos, intenta git merge --abort o git checkout -- <archivo> para restaurar archivos específicos.
